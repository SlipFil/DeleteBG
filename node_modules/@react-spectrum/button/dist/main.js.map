{"mappings":"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","sources":["packages/@react-spectrum/button/src/index.ts","packages/@react-spectrum/button/src/Button.tsx","packages/@adobe/spectrum-css-temp/components/button/vars.css","packages/@react-spectrum/button/src/ActionButton.tsx","packages/@react-spectrum/button/src/FieldButton.tsx","packages/@react-spectrum/button/src/LogicButton.tsx","packages/@react-spectrum/button/src/ClearButton.tsx","packages/@react-spectrum/button/src/ToggleButton.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/// <reference types=\"css-module-types\" />\n\nexport * from './Button';\nexport * from './ActionButton';\nexport * from './FieldButton';\nexport * from './LogicButton';\nexport * from './ClearButton';\nexport * from './ToggleButton';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {classNames, SlotProvider, useFocusableRef, useSlotProps, useStyleProps} from '@react-spectrum/utils';\nimport {FocusableRef} from '@react-types/shared';\nimport {FocusRing} from '@react-aria/focus';\nimport {mergeProps} from '@react-aria/utils';\nimport React, {ElementType, ReactElement} from 'react';\nimport {SpectrumButtonProps} from '@react-types/button';\nimport styles from '@adobe/spectrum-css-temp/components/button/vars.css';\nimport {Text} from '@react-spectrum/text';\nimport {useButton} from '@react-aria/button';\nimport {useHover} from '@react-aria/interactions';\nimport {useProviderProps} from '@react-spectrum/provider';\n\n// todo: CSS hasn't caught up yet, map\nlet VARIANT_MAPPING = {\n  negative: 'warning'\n};\n\nfunction Button<T extends ElementType = 'button'>(props: SpectrumButtonProps<T>, ref: FocusableRef<HTMLElement>) {\n  props = useProviderProps(props);\n  props = useSlotProps(props, 'button');\n  let {\n    elementType: ElementType = 'button',\n    children,\n    variant,\n    isQuiet,\n    isDisabled,\n    autoFocus,\n    ...otherProps\n  } = props;\n  let domRef = useFocusableRef(ref);\n  let {buttonProps, isPressed} = useButton(props, domRef);\n  let {hoverProps, isHovered} = useHover({isDisabled});\n  let {styleProps} = useStyleProps(otherProps);\n\n  let buttonVariant = variant;\n  if (VARIANT_MAPPING[variant]) {\n    buttonVariant = VARIANT_MAPPING[variant];\n  }\n\n  return (\n    <FocusRing focusRingClass={classNames(styles, 'focus-ring')} autoFocus={autoFocus}>\n      <ElementType\n        {...styleProps}\n        {...mergeProps(buttonProps, hoverProps)}\n        ref={domRef}\n        className={\n          classNames(\n            styles,\n            'spectrum-Button',\n            `spectrum-Button--${buttonVariant}`,\n            {\n              'spectrum-Button--quiet': isQuiet,\n              'is-disabled': isDisabled,\n              'is-active': isPressed,\n              'is-hovered': isHovered\n            },\n            styleProps.className\n          )\n        }>\n        <SlotProvider\n          slots={{\n            icon: {\n              size: 'S',\n              UNSAFE_className: classNames(styles, 'spectrum-Icon')\n            },\n            text: {\n              UNSAFE_className: classNames(styles, 'spectrum-Button-label')\n            }\n          }}>\n          {typeof children === 'string'\n            ? <Text>{children}</Text>\n            : children}\n        </SlotProvider>\n      </ElementType>\n    </FocusRing>\n  );\n}\n\n/**\n * Buttons allow users to perform an action or to navigate to another page.\n * They have multiple styles for various needs, and are ideal for calling attention to\n * where a user needs to do something in order to move forward in a flow.\n */\nlet _Button = React.forwardRef(Button) as <T extends ElementType = 'button'>(props: SpectrumButtonProps<T> & {ref?: FocusableRef<HTMLElement>}) => ReactElement;\nexport {_Button as Button};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n@import './index.css';\n@import './skin.css';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {classNames, SlotProvider, useFocusableRef, useSlotProps, useStyleProps} from '@react-spectrum/utils';\nimport CornerTriangle from '@spectrum-icons/ui/CornerTriangle';\nimport {FocusableRef} from '@react-types/shared';\nimport {FocusRing} from '@react-aria/focus';\nimport {mergeProps} from '@react-aria/utils';\nimport React from 'react';\nimport {SpectrumActionButtonProps} from '@react-types/button';\nimport styles from '@adobe/spectrum-css-temp/components/button/vars.css';\nimport {Text} from '@react-spectrum/text';\nimport {useButton} from '@react-aria/button';\nimport {useHover} from '@react-aria/interactions';\nimport {useProviderProps} from '@react-spectrum/provider';\n\nfunction ActionButton(props: SpectrumActionButtonProps, ref: FocusableRef<HTMLButtonElement>) {\n  props = useProviderProps(props);\n  props = useSlotProps(props, 'actionButton');\n  let {\n    isQuiet,\n    isDisabled,\n    staticColor,\n    children,\n    autoFocus,\n    // @ts-ignore (private)\n    holdAffordance,\n    ...otherProps\n  } = props;\n\n  let domRef = useFocusableRef(ref);\n  let {buttonProps, isPressed} = useButton(props, domRef);\n  let {hoverProps, isHovered} = useHover({isDisabled});\n  let {styleProps} = useStyleProps(otherProps);\n  let isTextOnly = React.Children.toArray(props.children).every(c => !React.isValidElement(c));\n\n  return (\n    <FocusRing focusRingClass={classNames(styles, 'focus-ring')} autoFocus={autoFocus}>\n      <button\n        {...styleProps}\n        {...mergeProps(buttonProps, hoverProps)}\n        ref={domRef}\n        className={\n          classNames(\n            styles,\n            'spectrum-ActionButton',\n            {\n              'spectrum-ActionButton--quiet': isQuiet,\n              'spectrum-ActionButton--staticColor': !!staticColor,\n              'spectrum-ActionButton--staticWhite': staticColor === 'white',\n              'spectrum-ActionButton--staticBlack': staticColor === 'black',\n              'is-active': isPressed,\n              'is-disabled': isDisabled,\n              'is-hovered': isHovered\n            },\n            styleProps.className\n          )\n        }>\n        {holdAffordance &&\n          <CornerTriangle UNSAFE_className={classNames(styles, 'spectrum-ActionButton-hold')} />\n        }\n        <SlotProvider\n          slots={{\n            icon: {\n              size: 'S',\n              UNSAFE_className: classNames(styles, 'spectrum-Icon')\n            },\n            text: {\n              UNSAFE_className: classNames(styles, 'spectrum-ActionButton-label')\n            }\n          }}>\n          {typeof children === 'string' || isTextOnly\n            ? <Text>{children}</Text>\n            : children}\n        </SlotProvider>\n      </button>\n    </FocusRing>\n  );\n}\n\n/**\n * ActionButtons allow users to perform an action.\n * They’re used for similar, task-based options within a workflow, and are ideal for interfaces where buttons aren’t meant to draw a lot of attention.\n */\nlet _ActionButton = React.forwardRef(ActionButton);\nexport {_ActionButton as ActionButton};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ButtonProps} from '@react-types/button';\nimport {classNames, SlotProvider, useFocusableRef, useSlotProps, useStyleProps} from '@react-spectrum/utils';\nimport {DOMProps, FocusableRef, StyleProps} from '@react-types/shared';\nimport {FocusRing} from '@react-aria/focus';\nimport {mergeProps} from '@react-aria/utils';\nimport React, {RefObject} from 'react';\nimport styles from '@adobe/spectrum-css-temp/components/button/vars.css';\nimport {useButton} from '@react-aria/button';\nimport {useHover} from '@react-aria/interactions';\n\ninterface FieldButtonProps extends ButtonProps, DOMProps, StyleProps {\n  isQuiet?: boolean,\n  isActive?: boolean,\n  validationState?: 'valid' | 'invalid',\n  focusRingClass?: string\n}\n\n// @private\nfunction FieldButton(props: FieldButtonProps, ref: FocusableRef) {\n  props = useSlotProps(props, 'button');\n  let {\n    isQuiet,\n    isDisabled,\n    validationState,\n    children,\n    autoFocus,\n    isActive,\n    focusRingClass,\n    ...otherProps\n  } = props;\n  let domRef = useFocusableRef(ref) as RefObject<HTMLButtonElement>;\n  let {buttonProps, isPressed} = useButton(props, domRef);\n  let {hoverProps, isHovered} = useHover({isDisabled});\n  let {styleProps} = useStyleProps(otherProps);\n\n  return (\n    <FocusRing focusRingClass={classNames(styles, 'focus-ring', focusRingClass)} autoFocus={autoFocus}>\n      <button\n        {...mergeProps(buttonProps, hoverProps)}\n        ref={domRef}\n        className={\n          classNames(\n            styles,\n            'spectrum-FieldButton',\n            {\n              'spectrum-FieldButton--quiet': isQuiet,\n              'is-active': isActive || isPressed,\n              'is-disabled': isDisabled,\n              'spectrum-FieldButton--invalid': validationState === 'invalid',\n              'is-hovered': isHovered\n            },\n            styleProps.className\n          )\n        }>\n        <SlotProvider\n          slots={{\n            icon: {\n              size: 'S',\n              UNSAFE_className: classNames(styles, 'spectrum-Icon')\n            }\n          }}>\n          {children}\n        </SlotProvider>\n      </button>\n    </FocusRing>\n  );\n}\n\nlet _FieldButton = React.forwardRef(FieldButton);\nexport {_FieldButton as FieldButton};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {classNames, useFocusableRef, useStyleProps} from '@react-spectrum/utils';\nimport {FocusableRef} from '@react-types/shared';\nimport {FocusRing} from '@react-aria/focus';\nimport {mergeProps} from '@react-aria/utils';\nimport React from 'react';\nimport {SpectrumLogicButtonProps} from '@react-types/button';\nimport styles from '@adobe/spectrum-css-temp/components/button/vars.css';\nimport {useButton} from '@react-aria/button';\nimport {useHover} from '@react-aria/interactions';\nimport {useProviderProps} from '@react-spectrum/provider';\n\nfunction LogicButton(props: SpectrumLogicButtonProps, ref: FocusableRef<HTMLButtonElement>) {\n  props = useProviderProps(props);\n  let {\n    variant,\n    children,\n    isDisabled,\n    autoFocus,\n    ...otherProps\n  } = props;\n  let domRef = useFocusableRef(ref);\n  let {buttonProps, isPressed} = useButton(props, domRef);\n  let {hoverProps, isHovered} = useHover({isDisabled});\n  let {styleProps} = useStyleProps(otherProps);\n\n  return (\n    <FocusRing focusRingClass={classNames(styles, 'focus-ring')} autoFocus={autoFocus}>\n      <button\n        {...styleProps}\n        {...mergeProps(buttonProps, hoverProps)}\n        ref={domRef}\n        className={\n          classNames(\n            styles,\n            'spectrum-LogicButton',\n            {\n              [`spectrum-LogicButton--${variant}`]: variant,\n              'is-disabled': isDisabled,\n              'is-active': isPressed,\n              'is-hovered': isHovered\n            },\n            styleProps.className\n          )\n        }>\n        <span className={classNames(styles, 'spectrum-Button-label')}>{children}</span>\n      </button>\n    </FocusRing>\n  );\n}\n\n/**\n * A LogicButton displays an operator within a boolean logic sequence.\n */\nlet _LogicButton = React.forwardRef(LogicButton);\nexport {_LogicButton as LogicButton};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaButtonElementTypeProps, ButtonProps} from '@react-types/button';\nimport {classNames, useFocusableRef, useStyleProps} from '@react-spectrum/utils';\nimport CrossSmall from '@spectrum-icons/ui/CrossSmall';\nimport {DOMProps, FocusableRef, StyleProps} from '@react-types/shared';\nimport {FocusRing} from '@react-aria/focus';\nimport {mergeProps} from '@react-aria/utils';\nimport React, {ElementType} from 'react';\nimport styles from '@adobe/spectrum-css-temp/components/button/vars.css';\nimport {useButton} from '@react-aria/button';\nimport {useHover} from '@react-aria/interactions';\n\ninterface ClearButtonProps<T extends ElementType = 'button'> extends ButtonProps, AriaButtonElementTypeProps<T>, DOMProps, StyleProps {\n  focusClassName?: string,\n  variant?: 'overBackground',\n  excludeFromTabOrder?: boolean,\n  preventFocus?: boolean\n}\n\nfunction ClearButton(props: ClearButtonProps, ref: FocusableRef<HTMLButtonElement>) {\n  let {\n    children = <CrossSmall UNSAFE_className={styles['spectrum-Icon']} />,\n    focusClassName,\n    variant,\n    autoFocus,\n    isDisabled,\n    preventFocus,\n    elementType = preventFocus ? 'div' : 'button' as ElementType,\n    ...otherProps\n  } = props;\n  let domRef = useFocusableRef(ref);\n  let {buttonProps, isPressed} = useButton({...props, elementType}, domRef);\n  let {hoverProps, isHovered} = useHover({isDisabled});\n  let {styleProps} = useStyleProps(otherProps);\n\n  // For cases like the clear button in a search field, remove the tabIndex so\n  // iOS 14 with VoiceOver doesn't focus the button and hide the keyboard when\n  // moving the cursor over the clear button.\n  if (preventFocus) {\n    delete buttonProps.tabIndex;\n  }\n\n  let ElementType = elementType;\n  return (\n    <FocusRing focusRingClass={classNames(styles, 'focus-ring', focusClassName)} autoFocus={autoFocus}>\n      <ElementType\n        {...styleProps}\n        {...mergeProps(buttonProps, hoverProps)}\n        ref={domRef}\n        className={\n          classNames(\n            styles,\n            'spectrum-ClearButton',\n            {\n              [`spectrum-ClearButton--${variant}`]: variant,\n              'is-disabled': isDisabled,\n              'is-active': isPressed,\n              'is-hovered': isHovered\n            },\n            styleProps.className\n          )\n        }>\n        {children}\n      </ElementType>\n    </FocusRing>\n  );\n}\n\nlet _ClearButton = React.forwardRef(ClearButton);\nexport {_ClearButton as ClearButton};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {classNames, SlotProvider, useFocusableRef, useStyleProps} from '@react-spectrum/utils';\nimport {FocusableRef} from '@react-types/shared';\nimport {FocusRing} from '@react-aria/focus';\nimport {mergeProps} from '@react-aria/utils';\nimport React from 'react';\nimport {SpectrumToggleButtonProps} from '@react-types/button';\nimport styles from '@adobe/spectrum-css-temp/components/button/vars.css';\nimport {Text} from '@react-spectrum/text';\nimport {useHover} from '@react-aria/interactions';\nimport {useProviderProps} from '@react-spectrum/provider';\nimport {useToggleButton} from '@react-aria/button';\nimport {useToggleState} from '@react-stately/toggle';\n\nfunction ToggleButton(props: SpectrumToggleButtonProps, ref: FocusableRef<HTMLButtonElement>) {\n  props = useProviderProps(props);\n  let {\n    isQuiet,\n    isDisabled,\n    isEmphasized,\n    staticColor,\n    children,\n    autoFocus,\n    ...otherProps\n  } = props;\n\n  let domRef = useFocusableRef(ref);\n  let state = useToggleState(props);\n  let {buttonProps, isPressed} = useToggleButton(props, state, domRef);\n  let {hoverProps, isHovered} = useHover({isDisabled});\n  let {styleProps} = useStyleProps(otherProps);\n  let isTextOnly = React.Children.toArray(props.children).every(c => !React.isValidElement(c));\n\n  return (\n    <FocusRing focusRingClass={classNames(styles, 'focus-ring')} autoFocus={autoFocus}>\n      <button\n        {...styleProps}\n        {...mergeProps(buttonProps, hoverProps)}\n        ref={domRef}\n        className={\n          classNames(\n            styles,\n            'spectrum-ActionButton',\n            {\n              'spectrum-ActionButton--quiet': isQuiet,\n              'spectrum-ActionButton--emphasized': isEmphasized,\n              'spectrum-ActionButton--staticColor': !!staticColor,\n              'spectrum-ActionButton--staticWhite': staticColor === 'white',\n              'spectrum-ActionButton--staticBlack': staticColor === 'black',\n              'is-active': isPressed,\n              'is-disabled': isDisabled,\n              'is-hovered': isHovered,\n              'is-selected': state.isSelected\n            },\n            styleProps.className\n          )\n        }>\n        <SlotProvider\n          slots={{\n            icon: {\n              size: 'S',\n              UNSAFE_className: classNames(styles, 'spectrum-Icon')\n            },\n            text: {\n              UNSAFE_className: classNames(styles, 'spectrum-ActionButton-label')\n            }\n          }}>\n          {typeof children === 'string' || isTextOnly\n            ? <Text>{children}</Text>\n            : children}\n        </SlotProvider>\n      </button>\n    </FocusRing>\n  );\n}\n\n/**\n * ToggleButtons allow users to toggle a selection on or off, for example\n * switching between two states or modes.\n */\nlet _ToggleButton = React.forwardRef(ToggleButton);\nexport {_ToggleButton as ToggleButton};\n"],"names":[],"version":3,"file":"main.js.map"}