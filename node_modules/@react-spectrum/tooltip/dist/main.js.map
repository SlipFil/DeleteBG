{"mappings":"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","sources":["packages/@react-spectrum/tooltip/src/index.ts","packages/@react-spectrum/tooltip/src/Tooltip.tsx","packages/@adobe/spectrum-css-temp/components/tooltip/vars.css","packages/@react-spectrum/tooltip/src/context.ts","packages/@react-spectrum/tooltip/src/TooltipTrigger.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/// <reference types=\"css-module-types\" />\n\nexport * from './Tooltip';\nexport * from './TooltipTrigger';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport AlertSmall from '@spectrum-icons/ui/AlertSmall';\nimport {classNames, createDOMRef, useStyleProps} from '@react-spectrum/utils';\nimport {DOMRef} from '@react-types/shared';\nimport InfoSmall from '@spectrum-icons/ui/InfoSmall';\nimport {mergeProps} from '@react-aria/utils';\nimport React, {useContext, useImperativeHandle, useRef} from 'react';\nimport {SpectrumTooltipProps} from '@react-types/tooltip';\nimport styles from '@adobe/spectrum-css-temp/components/tooltip/vars.css';\nimport SuccessSmall from '@spectrum-icons/ui/SuccessSmall';\nimport {TooltipContext} from './context';\nimport {useTooltip} from '@react-aria/tooltip';\n\nlet iconMap = {\n  info: InfoSmall,\n  positive: SuccessSmall,\n  negative: AlertSmall\n};\n\nfunction Tooltip(props: SpectrumTooltipProps, ref: DOMRef) {\n  let {ref: overlayRef, arrowProps, state, ...tooltipProviderProps} = useContext(TooltipContext);\n  let defaultRef = useRef();\n  overlayRef = overlayRef || defaultRef;\n  props = mergeProps(props, tooltipProviderProps);\n  let {\n    variant = 'neutral',\n    placement = 'top',\n    isOpen,\n    showIcon,\n    ...otherProps\n  } = props;\n  let {styleProps} = useStyleProps(otherProps);\n  let {tooltipProps} = useTooltip(props, state);\n\n  // Sync ref with overlayRef from context.\n  useImperativeHandle(ref, () => createDOMRef(overlayRef));\n\n  let Icon = iconMap[variant];\n\n  return (\n    <div\n      {...styleProps}\n      {...tooltipProps}\n      className={classNames(\n        styles,\n        'spectrum-Tooltip',\n        `spectrum-Tooltip--${variant}`,\n        `spectrum-Tooltip--${placement}`,\n        {\n          'is-open': isOpen\n        },\n        styleProps.className\n      )}\n      ref={overlayRef}>\n      {showIcon && variant !== 'neutral' && <Icon UNSAFE_className={classNames(styles, 'spectrum-Tooltip-typeIcon')} aria-hidden />}\n      {props.children && (\n        <span className={classNames(styles, 'spectrum-Tooltip-label')}>\n          {props.children}\n        </span>\n      )}\n      <span {...arrowProps} className={classNames(styles, 'spectrum-Tooltip-tip')} />\n    </div>\n  );\n}\n\n/**\n * Display container for Tooltip content. Has a directional arrow dependent on its placement.\n */\nlet _Tooltip = React.forwardRef(Tooltip);\nexport {_Tooltip as Tooltip};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n@import './index.css';\n@import './skin.css';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {PlacementAxis} from '@react-types/overlays';\nimport React, {HTMLAttributes, RefObject} from 'react';\nimport {StyleProps} from '@react-types/shared';\nimport {TooltipTriggerState} from '@react-stately/tooltip';\n\ninterface TooltipContextProps extends StyleProps {\n  state?: TooltipTriggerState,\n  ref?: RefObject<HTMLDivElement>,\n  placement?: PlacementAxis,\n  arrowProps?: HTMLAttributes<HTMLElement>\n}\n\nexport const TooltipContext = React.createContext<TooltipContextProps>({});\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableProvider} from '@react-aria/focus';\nimport {Overlay} from '@react-spectrum/overlays';\nimport React, {ReactElement, useRef} from 'react';\nimport {SpectrumTooltipTriggerProps} from '@react-types/tooltip';\nimport {TooltipContext} from './context';\nimport {useOverlayPosition} from '@react-aria/overlays';\nimport {useTooltipTrigger} from '@react-aria/tooltip';\nimport {useTooltipTriggerState} from '@react-stately/tooltip';\n\nconst DEFAULT_OFFSET = -1; // Offset needed to reach 4px/5px (med/large) distance between tooltip and trigger button\nconst DEFAULT_CROSS_OFFSET = 0;\n\nfunction TooltipTrigger(props: SpectrumTooltipTriggerProps) {\n  let {\n    children,\n    crossOffset = DEFAULT_CROSS_OFFSET,\n    isDisabled,\n    offset = DEFAULT_OFFSET,\n    trigger: triggerAction\n  } = props;\n\n  let [trigger, tooltip] = React.Children.toArray(children);\n\n  let state = useTooltipTriggerState(props);\n\n  let tooltipTriggerRef = useRef<HTMLElement>();\n  let overlayRef = useRef<HTMLDivElement>();\n\n  let {triggerProps, tooltipProps} = useTooltipTrigger({\n    isDisabled,\n    trigger: triggerAction\n  }, state, tooltipTriggerRef);\n\n  let {overlayProps, arrowProps, placement} = useOverlayPosition({\n    placement: props.placement || 'top',\n    targetRef: tooltipTriggerRef,\n    overlayRef,\n    offset,\n    crossOffset,\n    isOpen: state.isOpen\n  });\n\n  return (\n    <FocusableProvider\n      {...triggerProps}\n      ref={tooltipTriggerRef}>\n      {trigger}\n      <TooltipContext.Provider\n        value={{\n          state,\n          placement,\n          ref: overlayRef,\n          UNSAFE_style: overlayProps.style,\n          arrowProps,\n          ...tooltipProps\n        }}>\n        <Overlay isOpen={state.isOpen}>\n          {tooltip}\n        </Overlay>\n      </TooltipContext.Provider>\n    </FocusableProvider>\n  );\n}\n\n// Support TooltipTrigger inside components using CollectionBuilder.\nTooltipTrigger.getCollectionNode = function* (props: SpectrumTooltipTriggerProps) {\n  // Replaced the use of React.Childern.toArray because it mutates the key prop.\n  let childArray: ReactElement[] = [];\n  React.Children.forEach(props.children, child => {\n    if (React.isValidElement(child)) {\n      childArray.push(child);\n    }\n  });\n  let [trigger, tooltip] = childArray;\n  yield {\n    element: trigger,\n    wrapper: (element) => (\n      <TooltipTrigger key={element.key} {...props}>\n        {element}\n        {tooltip}\n      </TooltipTrigger>\n    )\n  };\n};\n\n/**\n * TooltipTrigger wraps around a trigger element and a Tooltip. It handles opening and closing\n * the Tooltip when the user hovers over or focuses the trigger, and positioning the Tooltip\n * relative to the trigger.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _TooltipTrigger = TooltipTrigger as (props: SpectrumTooltipTriggerProps) => JSX.Element;\nexport {_TooltipTrigger as TooltipTrigger};\n"],"names":[],"version":3,"file":"main.js.map"}