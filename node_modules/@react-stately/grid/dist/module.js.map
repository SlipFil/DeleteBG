{"mappings":";;;;;;;;;;;SCqBgB,yCAAY,CAAgD,KAA6B,EAAmB,CAAC;IAC3H,GAAG,CAAC,CAAC,aAAA,UAAU,cAAE,SAAS,EAAA,CAAC,GAAG,KAAK;IACnC,GAAG,CAAC,cAAc,GAAG,gCAAyB,CAAC,KAAK;IACpD,GAAG,CAAC,YAAY,GAAG,cAAO,KACtB,KAAK,CAAC,YAAY,GAAG,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,YAAY,IAAI,GAAG,CAAC,GAAG;MAC1D,CAAC;QAAA,KAAK,CAAC,YAAY;IAAA,CAAC;IAExB,GAAG,CAAC,aAAa,GAAG,cAAc,CAAC,aAAa;IAChD,cAAc,CAAC,aAAa,IAAI,GAAG,EAAE,KAAK,GAAK,CAAC;QAC9C,EAA2E,AAA3E,yEAA2E;QAC3E,EAAE,EAAE,SAAS,KAAK,CAAM,SAAI,GAAG,IAAI,IAAI,EAAE,CAAC;YACxC,GAAG,CAAC,IAAI,GAAG,UAAU,CAAC,OAAO,CAAC,GAAG;YACjC,EAAE,GAAE,IAAI,aAAJ,IAAI,KAAJ,IAAI,CAAJ,CAAU,GAAV,IAAI,CAAJ,CAAU,GAAV,IAAI,CAAE,IAAI,MAAK,CAAM,OAAE,CAAC;oBAGlB,GAA6B,EAE7B,IAAW;gBAJnB,GAAG,CAAC,QAAQ,GAAG,CAAC;uBAAG,IAAI,CAAC,UAAU;gBAAA,CAAC;gBACnC,EAAE,EAAE,KAAK,KAAK,CAAM,OAClB,GAAG,IAAG,GAA6B,GAA7B,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,eAA5B,GAA6B,KAA7B,IAAI,CAAJ,CAAkC,GAAlC,IAAI,CAAJ,CAAkC,GAAlC,GAA6B,CAAE,GAAG;qBAExC,GAAG,IAAG,IAAW,GAAX,QAAQ,CAAC,CAAC,eAAV,IAAW,KAAX,IAAI,CAAJ,CAAgB,GAAhB,IAAI,CAAJ,CAAgB,GAAhB,IAAW,CAAE,GAAG;YAE1B,CAAC;QACH,CAAC;QAED,aAAa,CAAC,GAAG,EAAE,KAAK;IAC1B,CAAC;IAED,EAAiE,AAAjE,+DAAiE;IACjE,gBAAS,KAAO,CAAC;QACf,EAAE,EAAE,cAAc,CAAC,UAAU,IAAI,IAAI,KAAK,UAAU,CAAC,OAAO,CAAC,cAAc,CAAC,UAAU,GACpF,cAAc,CAAC,aAAa,CAAC,IAAI;IAErC,CAAC,EAAE,CAAC;QAAA,UAAU;QAAE,cAAc,CAAC,UAAU;IAAA,CAAC;IAE1C,MAAM,CAAC,CAAC;oBACN,UAAU;sBACV,YAAY;QACZ,gBAAgB,EAAE,GAAG,CAAC,uBAAgB,CAAC,UAAU,EAAE,cAAc;IACnE,CAAC;AACH,CAAC;;;;;;UC4DG,MAAM,CAAC,QAAQ;MAjGN,wCAAc;aAiGJ,CAAC;eACb,CAAC;eAAG,IAAI,CAAC,IAAI;QAAA,CAAC;IACvB,CAAC;QAEG,IAAI,GAAG,CAAC;QACV,MAAM,CAAC,CAAC;eAAG,IAAI,CAAC,IAAI;QAAA,CAAC,CAAC,MAAM;IAC9B,CAAC;IAED,OAAO,GAAG,CAAC;QACT,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI;IACzB,CAAC;IAED,YAAY,CAAC,GAAQ,EAAE,CAAC;QACtB,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG;QAC9B,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,GAAG,IAAI;IACnC,CAAC;IAED,WAAW,CAAC,GAAQ,EAAE,CAAC;QACrB,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG;QAC9B,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,GAAG,IAAI;IACnC,CAAC;IAED,WAAW,GAAG,CAAC;YACN,GAAiB;QAAxB,MAAM,EAAC,GAAiB,GAAjB,CAAC;eAAG,IAAI,CAAC,IAAI;QAAA,CAAC,CAAC,CAAC,eAAhB,GAAiB,KAAjB,IAAI,CAAJ,CAAsB,GAAtB,IAAI,CAAJ,CAAsB,GAAtB,GAAiB,CAAE,GAAG;IAC/B,CAAC;IAED,UAAU,GAAG,CAAC;YAEL,GAAqB;QAD5B,GAAG,CAAC,IAAI,GAAG,CAAC;eAAG,IAAI,CAAC,IAAI;QAAA,CAAC;QACzB,MAAM,EAAC,GAAqB,GAArB,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,eAApB,GAAqB,KAArB,IAAI,CAAJ,CAA0B,GAA1B,IAAI,CAAJ,CAA0B,GAA1B,GAAqB,CAAE,GAAG;IACnC,CAAC;IAED,OAAO,CAAC,GAAQ,EAAE,CAAC;QACjB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG;IAC5B,CAAC;IAED,EAAE,CAAC,GAAW,EAAE,CAAC;QACf,KAAK,CAAC,IAAI,GAAG,CAAC;eAAG,IAAI,CAAC,OAAO;QAAE,CAAC;QAChC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG;IAC9B,CAAC;gBAlIW,IAA+B,CAAE,CAAC;QALzC,IAwIN,CAvIC,MAAM,GAA0B,GAAG,CAAC,GAAG;QAKrC,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;QACrB,IAAI,CAAC,WAAW,GAAG,IAAI,aAAJ,IAAI,KAAJ,IAAI,CAAJ,CAAiB,GAAjB,IAAI,CAAJ,CAAiB,GAAjB,IAAI,CAAE,WAAW;QACpC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;QAEd,GAAG,CAAC,KAAK,IAAI,IAAiB,GAAK,CAAC;YAClC,EAAwE,AAAxE,sEAAwE;YACxE,EAA0E,AAA1E,wEAA0E;YAC1E,EAAyD,AAAzD,uDAAyD;YACzD,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG;YACvC,EAAE,EAAE,IAAI,CAAC,SAAS,EAChB,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI;YAG5B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI;YAE9B,GAAG,CAAC,SAAS,GAAG,GAAG,CAAC,GAAG;YACvB,GAAG,CAAC,IAAI;YACR,GAAG,EAAE,GAAG,CAAC,KAAK,IAAI,IAAI,CAAC,UAAU,CAAE,CAAC;gBAClC,EAAE,EAAE,KAAK,CAAC,IAAI,KAAK,CAAM,SAAI,KAAK,CAAC,SAAS,IAAI,IAAI,EAClD,EAA4G,AAA5G,0GAA4G;gBAC5G,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG;gBAE5B,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG;gBAEvB,EAAE,EAAE,IAAI,EAAE,CAAC;oBACT,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,GAAG;oBACxB,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG;gBAC1B,CAAC,MACC,KAAK,CAAC,OAAO,GAAG,IAAI;gBAGtB,KAAK,CAAC,KAAK;gBACX,IAAI,GAAG,KAAK;YACd,CAAC;YAED,EAAE,EAAE,IAAI,EACN,IAAI,CAAC,OAAO,GAAG,IAAI;YAGrB,EAA2D,AAA3D,yDAA2D;YAC3D,EAAE,EAAE,QAAQ,EAAE,CAAC;gBACb,GAAG,EAAE,GAAG,CAAC,KAAK,IAAI,QAAQ,CAAC,UAAU,CACnC,EAAE,GAAG,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,GAC1B,MAAM,CAAC,KAAK;YAGlB,CAAC;QACH,CAAC;QAED,GAAG,CAAC,MAAM,IAAI,IAAiB,GAAK,CAAC;YACnC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG;YAC3B,GAAG,EAAE,GAAG,CAAC,KAAK,IAAI,IAAI,CAAC,UAAU,CAC/B,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,MAAM,KAAK,EACtC,MAAM,CAAC,KAAK;QAGlB,CAAC;QAED,GAAG,CAAC,KAAI;QACR,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,GAAK,CAAC;YAC/B,GAAG,CAAC,OAAO,GAAG,CAAC;gBACb,KAAK,EAAE,CAAC;gBACR,GAAG,EAAE,CAAM,QAAG,CAAC;gBACf,IAAI,EAAE,CAAK;gBACX,KAAK,EAAE,SAAS;gBAChB,aAAa,EAAE,IAAI;gBACnB,UAAU,EAAE,CAAC;uBAAG,IAAI,CAAC,UAAU;gBAAA,CAAC;gBAChC,QAAQ,EAAE,SAAS;gBACnB,SAAS,EAAE,SAAS;mBACjB,IAAI;gBACP,KAAK,EAAE,CAAC;YACV,CAAC;YAED,EAAE,EAAE,KAAI,EAAE,CAAC;gBACT,KAAI,CAAC,OAAO,GAAG,OAAO,CAAC,GAAG;gBAC1B,OAAO,CAAC,OAAO,GAAG,KAAI,CAAC,GAAG;YAC5B,CAAC,MACC,OAAO,CAAC,OAAO,GAAG,IAAI;YAGxB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO;YACtB,KAAK,CAAC,OAAO;YAEb,KAAI,GAAG,OAAO;QAChB,CAAC;QAED,EAAE,EAAE,KAAI,EACN,KAAI,CAAC,OAAO,GAAG,IAAI;IAEvB,CAAC;;;","sources":["packages/@react-stately/grid/src/index.ts","packages/@react-stately/grid/src/useGridState.ts","packages/@react-stately/grid/src/GridCollection.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport * from './useGridState';\nexport * from './GridCollection';\n","import {GridCollection} from '@react-types/grid';\nimport {Key, useEffect, useMemo} from 'react';\nimport {MultipleSelectionStateProps, SelectionManager, useMultipleSelectionState} from '@react-stately/selection';\n\nexport interface GridState<T, C extends GridCollection<T>> {\n  collection: C,\n  /** A set of keys for rows that are disabled. */\n  disabledKeys: Set<Key>,\n  /** A selection manager to read and update row selection state. */\n  selectionManager: SelectionManager\n}\n\ninterface GridStateOptions<T, C extends GridCollection<T>> extends MultipleSelectionStateProps {\n  collection: C,\n  disabledKeys?: Iterable<Key>,\n  focusMode?: 'row' | 'cell'\n}\n\n/**\n * Provides state management for a grid component. Handles row selection and focusing a grid cell's focusable child if applicable.\n */\nexport function useGridState<T extends object, C extends GridCollection<T>>(props: GridStateOptions<T, C>): GridState<T, C> {\n  let {collection, focusMode} = props;\n  let selectionState = useMultipleSelectionState(props);\n  let disabledKeys = useMemo(() =>\n      props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n    , [props.disabledKeys]);\n\n  let setFocusedKey = selectionState.setFocusedKey;\n  selectionState.setFocusedKey = (key, child) => {\n    // If focusMode is cell and an item is focused, focus a child cell instead.\n    if (focusMode === 'cell' && key != null) {\n      let item = collection.getItem(key);\n      if (item?.type === 'item') {\n        let children = [...item.childNodes];\n        if (child === 'last') {\n          key = children[children.length - 1]?.key;\n        } else {\n          key = children[0]?.key;\n        }\n      }\n    }\n\n    setFocusedKey(key, child);\n  };\n\n  // Reset focused key if that item is deleted from the collection.\n  useEffect(() => {\n    if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey)) {\n      selectionState.setFocusedKey(null);\n    }\n  }, [collection, selectionState.focusedKey]);\n\n  return {\n    collection,\n    disabledKeys,\n    selectionManager: new SelectionManager(collection, selectionState)\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport {GridNode, GridRow, GridCollection as IGridCollection} from '@react-types/grid';\nimport {Key} from 'react';\n\n\ninterface GridCollectionOptions<T> {\n  columnCount: number,\n  items: GridRow<T>[],\n  visitNode?: (cell: GridNode<T>) => GridNode<T>\n}\n\nexport class GridCollection<T> implements IGridCollection<T> {\n  keyMap: Map<Key, GridNode<T>> = new Map();\n  columnCount: number;\n  rows: GridNode<T>[];\n\n  constructor(opts?: GridCollectionOptions<T>) {\n    this.keyMap = new Map();\n    this.columnCount = opts?.columnCount;\n    this.rows = [];\n\n    let visit = (node: GridNode<T>) => {\n      // If the node is the same object as the previous node for the same key,\n      // we can skip this node and its children. We always visit columns though,\n      // because we depend on order to build the columns array.\n      let prevNode = this.keyMap.get(node.key);\n      if (opts.visitNode) {\n        node = opts.visitNode(node);\n      }\n\n      this.keyMap.set(node.key, node);\n\n      let childKeys = new Set();\n      let last: GridNode<T>;\n      for (let child of node.childNodes) {\n        if (child.type === 'cell' && child.parentKey == null) {\n          // if child is a cell parent key isn't already established by the collection, match child node to parent row\n          child.parentKey = node.key;\n        }\n        childKeys.add(child.key);\n\n        if (last) {\n          last.nextKey = child.key;\n          child.prevKey = last.key;\n        } else {\n          child.prevKey = null;\n        }\n\n        visit(child);\n        last = child;\n      }\n\n      if (last) {\n        last.nextKey = null;\n      }\n\n      // Remove deleted nodes and their children from the key map\n      if (prevNode) {\n        for (let child of prevNode.childNodes) {\n          if (!childKeys.has(child.key)) {\n            remove(child);\n          }\n        }\n      }\n    };\n\n    let remove = (node: GridNode<T>) => {\n      this.keyMap.delete(node.key);\n      for (let child of node.childNodes) {\n        if (this.keyMap.get(child.key) === child) {\n          remove(child);\n        }\n      }\n    };\n\n    let last: GridNode<T>;\n    opts.items.forEach((node, i) => {\n      let rowNode = {\n        level: 0,\n        key: 'row-' + i,\n        type: 'row',\n        value: undefined,\n        hasChildNodes: true,\n        childNodes: [...node.childNodes],\n        rendered: undefined,\n        textValue: undefined,\n        ...node,\n        index: i\n      } as GridNode<T>;\n\n      if (last) {\n        last.nextKey = rowNode.key;\n        rowNode.prevKey = last.key;\n      } else {\n        rowNode.prevKey = null;\n      }\n\n      this.rows.push(rowNode);\n      visit(rowNode);\n\n      last = rowNode;\n    });\n\n    if (last) {\n      last.nextKey = null;\n    }\n  }\n\n  *[Symbol.iterator]() {\n    yield* [...this.rows];\n  }\n\n  get size() {\n    return [...this.rows].length;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return [...this.rows][0]?.key;\n  }\n\n  getLastKey() {\n    let rows = [...this.rows];\n    return rows[rows.length - 1]?.key;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx: number) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n}\n"],"names":[],"version":3,"file":"module.js.map"}