var $7iSyh$reactstatelylist = require("@react-stately/list");
var $7iSyh$react = require("react");

function $parcel$exportWildcard(dest, source) {
  Object.keys(source).forEach(function(key) {
    if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) {
      return;
    }

    Object.defineProperty(dest, key, {
      enumerable: true,
      get: function get() {
        return source[key];
      }
    });
  });

  return dest;
}
function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}
var $817f925d289daf81$exports = {};

$parcel$export($817f925d289daf81$exports, "useTabListState", () => $817f925d289daf81$export$4ba071daf4e486);


function $817f925d289daf81$export$4ba071daf4e486(props) {
    let state = $7iSyh$reactstatelylist.useSingleSelectListState({
        ...props,
        suppressTextValueWarning: true
    });
    let { selectionManager: selectionManager , collection: collection , selectedKey: currentSelectedKey  } = state;
    let lastSelectedKey = $7iSyh$react.useRef(currentSelectedKey);
    // Ensure a tab is always selected (in case no selected key was specified or if selected item was deleted from collection)
    let selectedKey = currentSelectedKey;
    if (selectionManager.isEmpty || !collection.getItem(selectedKey)) {
        selectedKey = collection.getFirstKey();
        selectionManager.replaceSelection(selectedKey);
    }
    // If the tablist doesn't have focus and the selected key changes or if there isn't a focused key yet, change focused key to the selected key if it exists.
    if (selectionManager.focusedKey == null || !selectionManager.isFocused && selectedKey !== lastSelectedKey.current) selectionManager.setFocusedKey(selectedKey);
    lastSelectedKey.current = selectedKey;
    return state;
}


$parcel$exportWildcard(module.exports, $817f925d289daf81$exports);


//# sourceMappingURL=main.js.map
