{"mappings":"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","sources":["packages/@react-aria/select/src/index.ts","packages/@react-aria/select/src/useSelect.ts","packages/@react-aria/select/src/HiddenSelect.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport * from './useSelect';\nexport * from './HiddenSelect';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaButtonProps} from '@react-types/button';\nimport {AriaListBoxOptions} from '@react-aria/listbox';\nimport {AriaSelectProps} from '@react-types/select';\nimport {chain, filterDOMProps, mergeProps, useId} from '@react-aria/utils';\nimport {FocusEvent, HTMLAttributes, RefObject, useMemo} from 'react';\nimport {KeyboardDelegate} from '@react-types/shared';\nimport {ListKeyboardDelegate, useTypeSelect} from '@react-aria/selection';\nimport {SelectState} from '@react-stately/select';\nimport {setInteractionModality} from '@react-aria/interactions';\nimport {useCollator} from '@react-aria/i18n';\nimport {useField} from '@react-aria/label';\nimport {useMenuTrigger} from '@react-aria/menu';\n\ninterface AriaSelectOptions<T> extends AriaSelectProps<T> {\n  /**\n   * An optional keyboard delegate implementation for type to select,\n   * to override the default.\n   */\n  keyboardDelegate?: KeyboardDelegate\n}\n\ninterface SelectAria {\n  /** Props for the label element. */\n  labelProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the popup trigger element. */\n  triggerProps: AriaButtonProps,\n\n  /** Props for the element representing the selected value. */\n  valueProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the popup. */\n  menuProps: AriaListBoxOptions<unknown>,\n\n  /** Props for the select's description element, if any. */\n  descriptionProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the select's error message element, if any. */\n  errorMessageProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a select component.\n * A select displays a collapsible list of options and allows a user to select one of them.\n * @param props - Props for the select.\n * @param state - State for the select, as returned by `useListState`.\n */\nexport function useSelect<T>(props: AriaSelectOptions<T>, state: SelectState<T>, ref: RefObject<HTMLElement>): SelectAria {\n  let {\n    keyboardDelegate,\n    isDisabled\n  } = props;\n\n  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n  let collator = useCollator({usage: 'search', sensitivity: 'base'});\n  let delegate = useMemo(() => keyboardDelegate || new ListKeyboardDelegate(state.collection, state.disabledKeys, null, collator), [keyboardDelegate, state.collection, state.disabledKeys, collator]);\n\n  let {menuTriggerProps, menuProps} = useMenuTrigger(\n    {\n      isDisabled,\n      type: 'listbox'\n    },\n    state,\n    ref\n  );\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    switch (e.key) {\n      case 'ArrowLeft': {\n        // prevent scrolling containers\n        e.preventDefault();\n\n        let key = state.selectedKey != null ? delegate.getKeyAbove(state.selectedKey) : delegate.getFirstKey();\n        if (key) {\n          state.setSelectedKey(key);\n        }\n        break;\n      }\n      case 'ArrowRight': {\n        // prevent scrolling containers\n        e.preventDefault();\n\n        let key = state.selectedKey != null ? delegate.getKeyBelow(state.selectedKey) : delegate.getFirstKey();\n        if (key) {\n          state.setSelectedKey(key);\n        }\n        break;\n      }\n    }\n  };\n\n  let {typeSelectProps} = useTypeSelect({\n    keyboardDelegate: delegate,\n    selectionManager: state.selectionManager,\n    onTypeSelect(key) {\n      state.setSelectedKey(key);\n    }\n  });\n\n  let {labelProps, fieldProps, descriptionProps, errorMessageProps} = useField({\n    ...props,\n    labelElementType: 'span'\n  });\n\n  typeSelectProps.onKeyDown = typeSelectProps.onKeyDownCapture;\n  delete typeSelectProps.onKeyDownCapture;\n\n  let domProps = filterDOMProps(props, {labelable: true});\n  let triggerProps = mergeProps(typeSelectProps, menuTriggerProps, fieldProps);\n\n  let valueId = useId();\n\n  return {\n    labelProps: {\n      ...labelProps,\n      onClick: () => {\n        if (!props.isDisabled) {\n          ref.current.focus();\n\n          // Show the focus ring so the user knows where focus went\n          setInteractionModality('keyboard');\n        }\n      }\n    },\n    triggerProps: mergeProps(domProps, {\n      ...triggerProps,\n      onKeyDown: chain(triggerProps.onKeyDown, onKeyDown, props.onKeyDown),\n      onKeyUp: props.onKeyUp,\n      'aria-labelledby': [\n        triggerProps['aria-labelledby'],\n        triggerProps['aria-label'] && !triggerProps['aria-labelledby'] ? triggerProps.id : null,\n        valueId\n      ].filter(Boolean).join(' '),\n      onFocus(e: FocusEvent) {\n        if (state.isFocused) {\n          return;\n        }\n\n        if (props.onFocus) {\n          props.onFocus(e);\n        }\n\n        state.setFocused(true);\n      },\n      onBlur(e: FocusEvent) {\n        if (state.isOpen) {\n          return;\n        }\n\n        if (props.onBlur) {\n          props.onBlur(e);\n        }\n\n        state.setFocused(false);\n      }\n    }),\n    valueProps: {\n      id: valueId\n    },\n    menuProps: {\n      ...menuProps,\n      autoFocus: state.focusStrategy || true,\n      shouldSelectOnPressUp: true,\n      shouldFocusOnHover: true,\n      disallowEmptySelection: true,\n      onBlur: (e) => {\n        if (e.currentTarget.contains(e.relatedTarget as Node)) {\n          return;\n        }\n\n        if (props.onBlur) {\n          props.onBlur(e);\n        }\n        state.setFocused(false);\n      },\n      'aria-labelledby': [\n        fieldProps['aria-labelledby'],\n        triggerProps['aria-label'] && !fieldProps['aria-labelledby'] ? triggerProps.id : null\n      ].filter(Boolean).join(' ')\n    },\n    descriptionProps,\n    errorMessageProps\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport React, {ReactNode, RefObject} from 'react';\nimport {SelectState} from '@react-stately/select';\nimport {useInteractionModality} from '@react-aria/interactions';\nimport {useVisuallyHidden} from '@react-aria/visually-hidden';\n\ninterface AriaHiddenSelectProps {\n  /**\n   * Describes the type of autocomplete functionality the input should provide if any. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefautocomplete).\n   */\n   autoComplete?: string,\n\n  /** The text label for the select. */\n  label?: ReactNode,\n\n  /** HTML form input name. */\n  name?: string,\n\n  /** Sets the disabled state of the select and input. */\n  isDisabled?: boolean\n}\n\ninterface HiddenSelectProps<T> extends AriaHiddenSelectProps {\n  /** State for the select. */\n  state: SelectState<T>,\n\n  /** A ref to the trigger element. */\n  triggerRef: RefObject<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a hidden `<select>` element, which\n * can be used in combination with `useSelect` to support browser form autofill, mobile form\n * navigation, and native HTML form submission.\n */\nexport function useHiddenSelect<T>(props: AriaHiddenSelectProps, state: SelectState<T>, triggerRef: RefObject<HTMLElement>) {\n  let {autoComplete, name, isDisabled} = props;\n  let modality = useInteractionModality();\n  let {visuallyHiddenProps} = useVisuallyHidden();\n\n  // In Safari, the <select> cannot have `display: none` or `hidden` for autofill to work.\n  // In Firefox, there must be a <label> to identify the <select> whereas other browsers\n  // seem to identify it just by surrounding text.\n  // The solution is to use <VisuallyHidden> to hide the elements, which clips the elements to a\n  // 1px rectangle. In addition, we hide from screen readers with aria-hidden, and make the <select>\n  // non tabbable with tabIndex={-1}.\n  //\n  // In mobile browsers, there are next/previous buttons above the software keyboard for navigating\n  // between fields in a form. These only support native form inputs that are tabbable. In order to\n  // support those, an additional hidden input is used to marshall focus to the button. It is tabbable\n  // except when the button is focused, so that shift tab works properly to go to the actual previous\n  // input in the form. Using the <select> for this also works, but Safari on iOS briefly flashes\n  // the native menu on focus, so this isn't ideal. A font-size of 16px or greater is required to\n  // prevent Safari from zooming in on the input when it is focused.\n  //\n  // If the current interaction modality is null, then the user hasn't interacted with the page yet.\n  // In this case, we set the tabIndex to -1 on the input element so that automated accessibility\n  // checkers don't throw false-positives about focusable elements inside an aria-hidden parent.\n  return {\n    containerProps: {\n      ...visuallyHiddenProps,\n      'aria-hidden': true\n    },\n    inputProps: {\n      type: 'text',\n      tabIndex: modality == null || state.isFocused || state.isOpen ? -1 : 0,\n      style: {fontSize: 16},\n      onFocus: () => triggerRef.current.focus(),\n      disabled: isDisabled\n    },\n    selectProps: {\n      tabIndex: -1,\n      autoComplete,\n      disabled: isDisabled,\n      name,\n      size: state.collection.size,\n      value: state.selectedKey ?? '',\n      onChange: (e: React.ChangeEvent<HTMLSelectElement>) => state.setSelectedKey(e.target.value)\n    }\n  };\n}\n\n/**\n * Renders a hidden native `<select>` element, which can be used to support browser\n * form autofill, mobile form navigation, and native form submission.\n */\nexport function HiddenSelect<T>(props: HiddenSelectProps<T>) {\n  let {state, triggerRef, label, name, isDisabled} = props;\n  let {containerProps, inputProps, selectProps} = useHiddenSelect(props, state, triggerRef);\n\n  // If used in a <form>, use a hidden input so the value can be submitted to a server.\n  // If the collection isn't too big, use a hidden <select> element for this so that browser\n  // autofill will work. Otherwise, use an <input type=\"hidden\">.\n  if (state.collection.size <= 300) {\n    return (\n      <div {...containerProps}>\n        <input {...inputProps} />\n        <label>\n          {label}\n          <select {...selectProps}>\n            <option />\n            {[...state.collection.getKeys()].map(key => {\n              let item = state.collection.getItem(key);\n              if (item.type === 'item') {\n                return (\n                  <option\n                    key={item.key}\n                    value={item.key}>\n                    {item.textValue}\n                  </option>\n                );\n              }\n            })}\n          </select>\n        </label>\n      </div>\n    );\n  } else if (name) {\n    return (\n      <input\n        type=\"hidden\"\n        autoComplete={selectProps.autoComplete}\n        name={name}\n        disabled={isDisabled}\n        value={state.selectedKey} />\n    );\n  }\n\n  return null;\n}\n"],"names":[],"version":3,"file":"main.js.map"}